[1/12] Performing build step for 'bootloader'
[1/1] cd /home/metisa/Documents/ESP32/ESP_WorkSpace/ESP32_Intership/IS_APP/build/bootloader/esp-idf/esptool_py && /home/metisa/.espressif/python_env/idf5.2_py3.10_env/bin/python /home/metisa/Documents/ESP32/ESP_WorkSpace/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 bootloader 0x1000 /home/metisa/Documents/ESP32/ESP_WorkSpace/ESP32_Intership/IS_APP/build/bootloader/bootloader.bin
Bootloader binary size 0x68a0 bytes. 0x760 bytes (7%) free.
[2/10] Building C object esp-idf/http_server/CMakeFiles/__idf_http_server.dir/http_server.c.obj
[3/10] Building C object esp-idf/wifi/CMakeFiles/__idf_wifi.dir/wifi.c.obj
[4/10] Linking C static library esp-idf/wifi/libwifi.a
[5/10] Linking C static library esp-idf/http_server/libhttp_server.a
[6/10] Linking C static library esp-idf/main/libmain.a
[7/10] Generating ld/sections.ld
[8/10] Linking CXX executable IS_APP.elf
[9/10] Generating binary image from built executable
esptool.py v4.6.2
Creating esp32 image...
Merged 2 ELF sections
Successfully created esp32 image.
Generated /home/metisa/Documents/ESP32/ESP_WorkSpace/ESP32_Intership/IS_APP/build/IS_APP.bin
[10/10] cd /home/metisa/Documents/ESP32/ESP_WorkSpace/ESP32_Intership/IS_APP/build/esp-idf/esptool_py && /home/metisa/.espressif/python_env/idf5.2_py3.10_env/bin/python /home/metisa/Documents/ESP32/ESP_WorkSpace/esp-idf/components/partition_table/check_sizes.py --offset 0x8000 partition --type app /home/metisa/Documents/ESP32/ESP_WorkSpace/ESP32_Intership/IS_APP/build/partition_table/partition-table.bin /home/metisa/Documents/ESP32/ESP_WorkSpace/ESP32_Intership/IS_APP/build/IS_APP.bin
IS_APP.bin binary size 0x39d20 bytes. Smallest app partition is 0x100000 bytes. 0xc62e0 bytes (77%) free.
